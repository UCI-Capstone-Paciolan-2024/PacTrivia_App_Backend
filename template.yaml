AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  Backend for the PacTrivia App

Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    # The PermissionsBoundary allows users to safely develop with their function's permissions constrained
    # to their current application. All the functions and roles in this application have to include it and
    # it has to be manually updated when you add resources to your application.
    # More information in https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_boundaries.html
    PermissionsBoundary: !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:policy/${AppId}-${AWS::Region}-PermissionsBoundary'

  Api:
    Cors:
      AllowMethods: "'GET,POST,OPTIONS'"
      AllowHeaders: "'*'"
      AllowOrigin: "'*'"

Parameters:
  AppId:
    Type: String

Resources:
  ## PUBLIC ROUTES ##
  regDevice:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.reg_device.lambda_handler
      Runtime: python3.12
      CodeUri: ./src
      Description: Used to generate a user token on first app launch.
      MemorySize: 128
      Timeout: 30
      Architectures:
        - arm64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserData
      Environment:
        Variables:
          USER_TABLE: !Ref UserData
      Events:
        Api:
          Type: Api
          Properties:
            Path: /regDevice
            Method: POST

  startSession:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.start_session.lambda_handler
      Runtime: python3.12
      CodeUri: ./src
      Description: Starts a game session.
      MemorySize: 128
      Timeout: 30
      Architectures:
        - arm64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserData
        - DynamoDBCrudPolicy:
            TableName: !Ref Games
        - DynamoDBCrudPolicy:
            TableName: !Ref Venues
        - DynamoDBCrudPolicy:
            TableName: !Ref Questions
      Environment:
        Variables:
          USER_TABLE: !Ref UserData
          GAME_TABLE: !Ref Games
          VENUE_TABLE: !Ref Venues
          QUESTION_TABLE: !Ref Questions
      Events:
        Api:
          Type: Api
          Properties:
            Path: /startSession
            Method: POST

  getQuestion:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.get_question.lambda_handler
      Runtime: python3.12
      CodeUri: ./src
      Description: Retrieves a question to be answered.
      MemorySize: 128
      Timeout: 30
      Architectures:
        - arm64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Questions
        - DynamoDBCrudPolicy:
            TableName: !Ref UserData
      Environment:
        Variables:
          QUESTION_TABLE: !Ref Questions
          USER_TABLE: !Ref UserData
      Events:
        Api:
          Type: Api
          Properties:
            Path: /getQuestion
            Method: POST

  checkAnswer:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.check_answer.lambda_handler
      Runtime: python3.12
      CodeUri: ./src
      Description: Checks answer and updates score.
      MemorySize: 128
      Timeout: 30
      Architectures:
        - arm64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserData
      Environment:
        Variables:
          USER_TABLE: !Ref UserData
      Events:
        Api:
          Type: Api
          Properties:
            Path: /checkAnswer
            Method: POST

  ## PRIVATE / ADMIN ROUTES ##
  questionManager:
    Type: AWS::Serverless::Function
    Properties:
      Handler: admin.question_manager.lambda_handler
      Runtime: python3.12
      CodeUri: ./src
      Description: Admin function for managing questions in database.
      MemorySize: 128
      Timeout: 30
      Architectures:
        - arm64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Questions
      Environment:
        Variables:
          QUESTION_TABLE: !Ref Questions
      Events:
        Api:
          Type: Api
          Properties:
            Path: /questionManager
            Method: POST

  gameManager:
    Type: AWS::Serverless::Function
    Properties:
      Handler: admin.game_manager.lambda_handler
      Runtime: python3.12
      CodeUri: ./src
      Description: Admin function for managing games in database.
      MemorySize: 128
      Timeout: 30
      Architectures:
        - arm64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Games
      Environment:
        Variables:
          GAME_TABLE: !Ref Games
      Events:
        Api:
          Type: Api
          Properties:
            Path: /gameManager
            Method: POST

  venueManager:
    Type: AWS::Serverless::Function
    Properties:
      Handler: admin.venue_manager.lambda_handler
      Runtime: python3.12
      CodeUri: ./src
      Description: Admin function for managing venues in database.
      MemorySize: 128
      Timeout: 30
      Architectures:
        - arm64
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Venues
      Environment:
        Variables:
          VENUE_TABLE: !Ref Venues
      Events:
        Api:
          Type: Api
          Properties:
            Path: /venueManager
            Method: POST


  ## DynamoDB Tables ##
  UserData:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: B
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  Questions:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: team
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
      KeySchema:
        - AttributeName: team
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  Venues:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: geohash
          AttributeType: S
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: geohash
          KeyType: HASH
        - AttributeName: id
          KeyType: RANGE
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
  Games:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: venue_id
          AttributeType: S
        - AttributeName: end
          AttributeType: S
      KeySchema:
        - AttributeName: venue_id
          KeyType: HASH
        - AttributeName: end
          KeyType: RANGE
      BillingMode: PROVISIONED
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1